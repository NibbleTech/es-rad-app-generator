<?php

declare(strict_types=1);

namespace NibbleTech\EsRadAppGenerator\CodeGenerator;

use NibbleTech\EsRadAppGenerator\Components\EventEntityPropertyMapping;
use NibbleTech\EsRadAppGenerator\Components\Property;
use NibbleTech\EsRadAppGenerator\Components\SideEffects\Creation;
use NibbleTech\EsRadAppGenerator\Components\SideEffects\Deletion;
use NibbleTech\EsRadAppGenerator\Components\SideEffects\Update;
use PHPUnit\Framework\TestCase;

class SideEffectCrudCodeGeneratorTest extends TestCase
{
	private SideEffectCrudCodeGenerator $sideEffectCrudCodeGenerator;

	protected function setUp(): void
	{
		parent::setUp(); // TODO: Change the autogenerated stub

		$this->sideEffectCrudCodeGenerator = new SideEffectCrudCodeGenerator();
	}

	public function test_it_generates_create_code(): void
	{
		$expected = <<<php
\$entityTestForCreation = new Foo\Test();
\$entityTestForCreation->foo = \$event->bar;
\$this->testRepository->persist(\$entityTestForCreation);

php;

		$sideEffect = Creation::forEntityClass(
			'Foo\Test',
			[
				EventEntityPropertyMapping::with(
					Property::new('foo', 'string'),
					Property::new('bar', 'string'),
				)
			]
		);

		$code = $this->sideEffectCrudCodeGenerator->generate($sideEffect);

		$this->assertEquals($expected, $code);
	}

	public function test_it_generates_update_code(): void
	{
		$tab      = "\t";
		$expected = <<<php
\$entityTestForUpdate = \$this->testRepository->findBy([
$tab'foo' => \$event->getBar(),
]);
\$entityTestForUpdate->foo = \$event->bar;
\$this->testRepository->persist(\$entityTestForUpdate);

php;

		$sideEffect = Update::forEntityClass(
			'Test',
			[
				EventEntityPropertyMapping::with(
					Property::new('foo', 'string'),
					Property::new('bar', 'string'),
				)
			]
		);

		$code = $this->sideEffectCrudCodeGenerator->generate($sideEffect);

		$this->assertEquals($expected, $code);
	}

	public function test_it_generates_delete_code(): void
	{
		$tab          = "\t";
		$expected = <<<php
\$entityTestForDeletion = \$this->testRepository->findBy([
$tab'foo' => \$event->getBar(),
]);
\$this->testRepository->delete(\$entityTestForDeletion);

php;

		$sideEffect = Deletion::forEntityClass(
			'Test',
			[
				EventEntityPropertyMapping::with(
					Property::new('foo', 'string'),
					Property::new('bar', 'string'),
				)
			]
		);

		$code = $this->sideEffectCrudCodeGenerator->generate($sideEffect);

		$this->assertEquals($expected, $code);
	}
}
