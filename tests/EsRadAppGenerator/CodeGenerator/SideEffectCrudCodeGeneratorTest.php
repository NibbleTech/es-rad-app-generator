<?php
declare(strict_types=1);

namespace EsRadAppGenerator\CodeGenerator;

use EsRadAppGenerator\EntityStuff\Output\EventEntityPropertyMapping;
use EsRadAppGenerator\EntityStuff\Output\Property;
use EsRadAppGenerator\EntityStuff\Output\SideEffects\Creation;
use EsRadAppGenerator\EntityStuff\Output\SideEffects\Deletion;
use EsRadAppGenerator\EntityStuff\Output\SideEffects\Update;
use PHPUnit\Framework\TestCase;

class SideEffectCrudCodeGeneratorTest extends TestCase
{
    private SideEffectCrudCodeGenerator $sideEffectCrudCodeGenerator;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        
        $this->sideEffectCrudCodeGenerator = new SideEffectCrudCodeGenerator();
    }

    function test_it_generates_create_code(): void
    {
        $expected = <<<php
\$entityTestForCreation = new Foo\Test();
\$entityTestForCreation->foo = \$event->bar;
\$this->testRepository->persist(\$entityTestForCreation);

php;

        $sideEffect = Creation::forEntityClass(
            'Foo\Test',
            [
                EventEntityPropertyMapping::with(
                    Property::new('foo', 'string'),
                    Property::new('bar', 'string'),
                )
            ]
        );

        $code = $this->sideEffectCrudCodeGenerator->generate($sideEffect);

        $this->assertEquals($expected, $code);
    }

    function test_it_generates_update_code(): void
    {
        $tab      = "\t";
        $expected = <<<php
\$entityTestForUpdate = \$this->testRepository->findBy([
$tab'foo' => \$event->getBar(),
]);
\$entityTestForUpdate->foo = \$event->bar;
\$this->testRepository->persist(\$entityTestForUpdate);

php;

        $sideEffect = Update::forEntityClass(
            'Test',
            [
                EventEntityPropertyMapping::with(
                    Property::new('foo', 'string'),
                    Property::new('bar', 'string'),
                )
            ]
        );

        $code = $this->sideEffectCrudCodeGenerator->generate($sideEffect);

        $this->assertEquals($expected, $code);
    }

    function test_it_generates_delete_code(): void
    {
        $tab          = "\t";
        $expected = <<<php
\$entityTestForDeletion = \$this->testRepository->findBy([
$tab'foo' => \$event->getBar(),
]);
\$this->testRepository->delete(\$entityTestForDeletion);

php;

        $sideEffect = Deletion::forEntityClass(
            'Test',
            [
                EventEntityPropertyMapping::with(
                    Property::new('foo', 'string'),
                    Property::new('bar', 'string'),
                )
            ]
        );

        $code = $this->sideEffectCrudCodeGenerator->generate($sideEffect);

        $this->assertEquals($expected, $code);
    }
}
